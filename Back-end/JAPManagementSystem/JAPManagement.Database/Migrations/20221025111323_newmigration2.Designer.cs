// <auto-generated />
using System;
using JAPManagement.Database.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace JAPManagementSystem.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20221025111323_newmigration2")]
    partial class newmigration2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("JAPManagementSystem.Models.ProgramModel.JapItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ExpectedHours")
                        .HasColumnType("int");

                    b.Property<bool>("IsEvent")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("URL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Items");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Lorem ipsum dolor sit amet",
                            ExpectedHours = 25,
                            IsEvent = false,
                            Name = "Modern React with Redux",
                            URL = "www.loremipsum.dolor"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Lorem ipsum dolor sit amet",
                            ExpectedHours = 8,
                            IsEvent = false,
                            Name = "SQL Bootcamp",
                            URL = "www.loremipsum.dolor"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Lorem ipsum dolor sit amet",
                            ExpectedHours = 10,
                            IsEvent = true,
                            Name = "Send completed assignment to mentor",
                            URL = ""
                        },
                        new
                        {
                            Id = 4,
                            Description = "Lorem ipsum dolor sit amet",
                            ExpectedHours = 17,
                            IsEvent = false,
                            Name = "Postman API Testing",
                            URL = "www.loremipsum.dolor"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Lorem ipsum dolor sit amet",
                            ExpectedHours = 12,
                            IsEvent = false,
                            Name = ".NET Core API | Jumpstart",
                            URL = "www.loremipsum.dolor"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Lorem ipsum dolor sit amet",
                            ExpectedHours = 12,
                            IsEvent = true,
                            Name = "Project task no.1",
                            URL = "www.loremipsum.org"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Lorem ipsum dolor sit amet",
                            ExpectedHours = 13,
                            IsEvent = false,
                            Name = "HTML5 & CSS3 with Animations",
                            URL = "www.loremipsum.dolor"
                        },
                        new
                        {
                            Id = 8,
                            Description = "Lorem ipsum dolor sit amet",
                            ExpectedHours = 14,
                            IsEvent = false,
                            Name = "Complete Javascript Bootcamp | ES6",
                            URL = "www.loremipsum.dolor"
                        },
                        new
                        {
                            Id = 9,
                            Description = "Lorem ipsum dolor sit amet",
                            ExpectedHours = 3,
                            IsEvent = true,
                            Name = "Task refactor",
                            URL = ""
                        });
                });

            modelBuilder.Entity("JAPManagementSystem.Models.ProgramModel.JapProgram", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("JapPrograms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = ".NET & React.js",
                            Name = "JAP DEV"
                        },
                        new
                        {
                            Id = 2,
                            Content = "Selenium & Unit & Integration Testing",
                            Name = "JAP QA"
                        },
                        new
                        {
                            Id = 3,
                            Content = "Linux & Docker",
                            Name = "JAP DevOps"
                        });
                });

            modelBuilder.Entity("JAPManagementSystem.Models.ProgramModel.ProgramItem", b =>
                {
                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.HasKey("ItemId", "ProgramId");

                    b.HasIndex("ProgramId");

                    b.ToTable("ProgramItems");
                });

            modelBuilder.Entity("JAPManagementSystem.Models.SelectionModel.AdminReport", b =>
                {
                    b.Property<int>("OverallSuccessRate")
                        .HasColumnType("int");

                    b.Property<string>("ProgramName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SelectionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SelectionSuccessRate")
                        .HasColumnType("int");

                    b.ToTable("AdminReports", null, t => t.ExcludeFromMigrations());
                });

            modelBuilder.Entity("JAPManagementSystem.Models.SelectionModel.Selection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("datetime2");

                    b.Property<int>("JapProgramId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("JapProgramId");

                    b.ToTable("Selections");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateEnd = new DateTime(2022, 11, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateStart = new DateTime(2022, 9, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            JapProgramId = 1,
                            Name = "Dev Jap September",
                            Status = 1
                        },
                        new
                        {
                            Id = 2,
                            DateEnd = new DateTime(2022, 8, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateStart = new DateTime(2022, 6, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            JapProgramId = 2,
                            Name = "Dev QA June",
                            Status = 2
                        });
                });

            modelBuilder.Entity("JAPManagementSystem.Models.StudentModel.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("SId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("JAPManagementSystem.Models.StudentModel.StudentItem", b =>
                {
                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<string>("StudentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Done")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ItemId", "StudentId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentItems");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("JAPManagementSystem.Models.UserModel.User", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("User");
                });

            modelBuilder.Entity("JAPManagementSystem.Models.StudentModel.Student", b =>
                {
                    b.HasBaseType("JAPManagementSystem.Models.UserModel.User");

                    b.Property<int?>("SelectionId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasIndex("SelectionId");

                    b.HasDiscriminator().HasValue("Student");

                    b.HasData(
                        new
                        {
                            Id = "10b5260a0-94c9-4681-8468-945a4aa4373f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0af37133-6d9e-4e43-aa0a-e88240493840",
                            Email = "johndoe@hotmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "JOHNDOE@HOTMAIL.COM",
                            NormalizedUserName = "JOHNDOE",
                            PasswordHash = "AQAAAAEAACcQAAAAEAT9mk3FWTVJa/q7eobHLC7r4P8wMbs9fcfttAYtUF/7eGFX+sOtz9gosH5zWhNXiQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "B4WFEMAOZ47PNHKJF642V6QWHWK2JHPN",
                            TwoFactorEnabled = false,
                            UserName = "johndoe",
                            FirstName = "John",
                            LastName = "Doe",
                            Role = 1,
                            SelectionId = 1,
                            Status = 2
                        },
                        new
                        {
                            Id = "1023b5260a0-94c9-4681-8468-945a4aa4373f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0af37133-6d9e-4e43-aa0a-e88240493840",
                            Email = "janedoe@hotmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "JANEDOE@HOTMAIL.COM",
                            NormalizedUserName = "JANEDOE",
                            PasswordHash = "AQAAAAEAACcQAAAAEAT9mk3FWTVJa/q7eobHLC7r4P8wMbs9fcfttAYtUF/7eGFX+sOtz9gosH5zWhNXiQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "B4WFEMAOZ47PNHKJF642V6QWHWK2JHPN",
                            TwoFactorEnabled = false,
                            UserName = "janedoe",
                            FirstName = "Jane",
                            LastName = "Doe",
                            Role = 1,
                            SelectionId = 2,
                            Status = 3
                        },
                        new
                        {
                            Id = "1230b5260a0-94c9-4681-8468-945a4aa4373f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0af37133-6d9e-4e43-aa0a-e88240493840",
                            Email = "snoopdogg@hotmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "SNOOPDOGG@HOTMAIL.COM",
                            NormalizedUserName = "SNOOPDOGG",
                            PasswordHash = "AQAAAAEAACcQAAAAEAT9mk3FWTVJa/q7eobHLC7r4P8wMbs9fcfttAYtUF/7eGFX+sOtz9gosH5zWhNXiQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "B4WFEMAOZ47PNHKJF642V6QWHWK2JHPN",
                            TwoFactorEnabled = false,
                            UserName = "snoopdogg",
                            FirstName = "Snoop",
                            LastName = "Dogg",
                            Role = 1,
                            SelectionId = 1,
                            Status = 3
                        });
                });

            modelBuilder.Entity("JAPManagementSystem.Models.UserModel.Admin", b =>
                {
                    b.HasBaseType("JAPManagementSystem.Models.UserModel.User");

                    b.HasDiscriminator().HasValue("Admin");

                    b.HasData(
                        new
                        {
                            Id = "0b5260a0-94c9-4681-8468-945a4aa4373f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0af37133-6d9e-4e43-aa0a-e88240493840",
                            Email = "malikhuremovic2001@hotmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MALIKHUREMOVIC2001@HOTMAIL.COM",
                            NormalizedUserName = "MALIKHUREM",
                            PasswordHash = "AQAAAAEAACcQAAAAEAT9mk3FWTVJa/q7eobHLC7r4P8wMbs9fcfttAYtUF/7eGFX+sOtz9gosH5zWhNXiQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "B4WFEMAOZ47PNHKJF642V6QWHWK2JHPN",
                            TwoFactorEnabled = false,
                            UserName = "malikhurem",
                            FirstName = "Malik",
                            LastName = "Huremovic",
                            Role = 0
                        });
                });

            modelBuilder.Entity("JAPManagementSystem.Models.ProgramModel.ProgramItem", b =>
                {
                    b.HasOne("JAPManagementSystem.Models.ProgramModel.JapItem", "Item")
                        .WithMany("ProgramItems")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JAPManagementSystem.Models.ProgramModel.JapProgram", "Program")
                        .WithMany("ProgramItems")
                        .HasForeignKey("ProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Program");
                });

            modelBuilder.Entity("JAPManagementSystem.Models.SelectionModel.Selection", b =>
                {
                    b.HasOne("JAPManagementSystem.Models.ProgramModel.JapProgram", "JapProgram")
                        .WithMany("Selections")
                        .HasForeignKey("JapProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JapProgram");
                });

            modelBuilder.Entity("JAPManagementSystem.Models.StudentModel.Comment", b =>
                {
                    b.HasOne("JAPManagementSystem.Models.StudentModel.Student", "Student")
                        .WithMany("Comments")
                        .HasForeignKey("SId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("JAPManagementSystem.Models.StudentModel.StudentItem", b =>
                {
                    b.HasOne("JAPManagementSystem.Models.ProgramModel.JapItem", "Item")
                        .WithMany("StudentItems")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JAPManagementSystem.Models.StudentModel.Student", "Student")
                        .WithMany("StudentItems")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JAPManagementSystem.Models.StudentModel.Student", b =>
                {
                    b.HasOne("JAPManagementSystem.Models.SelectionModel.Selection", "Selection")
                        .WithMany("Students")
                        .HasForeignKey("SelectionId");

                    b.Navigation("Selection");
                });

            modelBuilder.Entity("JAPManagementSystem.Models.ProgramModel.JapItem", b =>
                {
                    b.Navigation("ProgramItems");

                    b.Navigation("StudentItems");
                });

            modelBuilder.Entity("JAPManagementSystem.Models.ProgramModel.JapProgram", b =>
                {
                    b.Navigation("ProgramItems");

                    b.Navigation("Selections");
                });

            modelBuilder.Entity("JAPManagementSystem.Models.SelectionModel.Selection", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("JAPManagementSystem.Models.StudentModel.Student", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("StudentItems");
                });
#pragma warning restore 612, 618
        }
    }
}
